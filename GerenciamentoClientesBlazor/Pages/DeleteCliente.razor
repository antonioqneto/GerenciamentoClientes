@page "/deleteCliente/{clienteId}"
@using GerenciamentoClientes.Client.Services

@inject ClienteService _clienteService
@inject NavigationManager _objNavigationManager

<h2>Apagar Cliente</h2>
<hr />
<h3>Tem certeza que deseja apagar esse registro?</h3>
<div class="row">
	<div class="col-md-8">
		<div class="form-group">
			<p>Id do Cliente: @cliente.Id</p>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-8">
		<div class="form-group">
			<p>Nome: @cliente.Nome</p>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-8">
		<div class="form-group">
			<p>Email: @cliente.Email</p>
		</div>
	</div>
</div>


<div class="row">
	<div class="col-md-8">
		<div class="form-group">
			<p>Telefone: @cliente.Telefone</p>
		</div>
	</div>
</div>

<div class="mb-3 text-center">
	<button Type="submit" class="btn btn-primary" Color="ButtonColor.Primary" @onclick="@DeletarCliente" value="Salvar"> Apagar </button>
	<button Type="reset" class="btn btn-secondary" Color="ButtonColor.Secundary" @onclick="@Cancel" value="Cancelar"> Cancelar </button>
</div>

@code {
	[Parameter] public string clienteId { get; set; }

	private Cliente cliente = new();

	protected override async Task OnInitializedAsync()
	{
		_ = Int32.TryParse(clienteId, out var stringToInt);

		cliente.Id = stringToInt;

		cliente = await _clienteService.GetClienteById(cliente.Id);

		if (cliente == null)
			Console.WriteLine("Erro ao obter dados de cliente");
	}

	protected async void DeletarCliente()
	{
		await _clienteService.DeleteCliente(cliente.Id);
		_objNavigationManager.NavigateTo("listClientes");
	}

	void Cancel()
	{
		_objNavigationManager.NavigateTo("listClientes");
	}
}
